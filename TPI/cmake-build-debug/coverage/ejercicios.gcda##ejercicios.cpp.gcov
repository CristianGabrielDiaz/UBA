        -:    0:Source:D:/Mi PC/Documents/UBA/AED1/TPI/ejercicios.cpp
        -:    0:Graph:D:\Mi PC\Documents\UBA\AED1\TPI\cmake-build-debug\CMakeFiles\tpi.dir\ejercicios.gcno
        -:    0:Data:D:\Mi PC\Documents\UBA\AED1\TPI\cmake-build-debug\CMakeFiles\tpi.dir\ejercicios.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "ejercicios.h"
        -:    2:#include "auxiliares.h"
        -:    3:#include "definiciones.h"
        -:    4:
        -:    5:using namespace std;
        -:    6:// Implementacion Problema 1
function _Z16esEncuestaValidaSt6vectorIS_IiSaIiEESaIS1_EES3_ called 40 returned 100% blocks executed 67%
       40:    7:bool esEncuestaValida ( eph_h th, eph_i ti ) {
       40:    8:	bool resp = false;
       40:    9:    if( esValida(th,ti) ){
       40:    9-block  0
call    0 returned 40
call    1 returned 40
branch  2 taken 40 (fallthrough)
branch  3 taken 0 (throw)
       40:    9-block  1
call    4 returned 40
branch  5 taken 40 (fallthrough)
branch  6 taken 0 (throw)
       40:    9-block  2
call    7 returned 40
call    8 returned 40
branch  9 taken 11 (fallthrough)
branch 10 taken 29
    $$$$$:    9-block  3
call   11 never executed
    $$$$$:    9-block  4
    $$$$$:    9-block  5
call   12 never executed
       11:   10:        resp=true;
       11:   10-block  0
        -:   11:    }
        -:   12:	// TODO
       40:   13:	return resp;
       40:   13-block  0
       40:   13-block  1
        -:   14:}
        -:   15:
        -:   16:// Implementacion Problema 2
function _Z16histHabitacionalSt6vectorIS_IiSaIiEESaIS1_EES3_i called 4 returned 100% blocks executed 72%
        4:   17:vector < int > histHabitacional ( eph_h th, eph_i ti, int region ) {
        4:   18:	vector < int > resultado; /*= {-1, -1, -1, -1, -1, -1};*/
        4:   18-block  0
call    0 returned 4
        4:   19:    longitudIgualAMaximaCantidadHabitaciones(th,region,resultado);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   19-block  0
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4:   19-block  1
call    6 returned 4
    $$$$$:   19-block  2
call    7 never executed
    $$$$$:   19-block  3
        4:   20:    int j=0;
      311:   21:    while(j<th.size()){
      311:   21-block  0
call    0 returned 311
branch  1 taken 307 (fallthrough)
branch  2 taken 4
      307:   22:        if(j<resultado.size()){
      307:   22-block  0
call    0 returned 307
branch  1 taken 19 (fallthrough)
branch  2 taken 288
       19:   23:            resultado[j]=cantHogaresCasaConNHabitaciones(th, region, j + 1);
       19:   23-block  0
call    0 returned 19
branch  1 taken 19 (fallthrough)
branch  2 taken 0 (throw)
       19:   23-block  1
call    3 returned 19
call    4 returned 19
branch  5 taken 19 (fallthrough)
branch  6 taken 0 (throw)
       19:   23-block  2
call    7 returned 19
    $$$$$:   23-block  3
call    8 never executed
    $$$$$:   23-block  4
        -:   24:        }
      307:   25:        j++;
      307:   25-block  0
        -:   26:    }
        -:   27:	// TODO
        4:   28:	return resultado;
        4:   28-block  0
        4:   28-block  1
        -:   29:}
        -:   30:
        -:   31:// Implementacion Problema 3
function _Z23laCasaEstaQuedandoChicaSt6vectorIS_IiSaIiEESaIS1_EES3_ called 3 returned 100% blocks executed 59%
        3:   32:vector< pair < int, float > > laCasaEstaQuedandoChica ( eph_h th, eph_i ti ) {
        3:   33:    int uno = 1;
        -:   34:    vector<pair<int,float>> resp = {make_pair(1,-1.0),
        -:   35:                                        make_pair(40, -1.0),
        -:   36:                                        make_pair(41, -1.0),
        -:   37:                                        make_pair(42,-1.0),
        -:   38:                                        make_pair(43,-1.0),
        3:   39:                                        make_pair(44,-1.0)};
        3:   39-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   39-block  1
    $$$$$:   39-block  2
call    4 never executed
        -:   40:
       21:   41:    for (int k=0;k<resp.size();k++){
       21:   41-block  0
call    0 returned 21
branch  1 taken 18 (fallthrough)
branch  2 taken 3
       18:   42:        resp[k].second=proporcionDeCasasConHC(th,ti,resp[k].first);
       18:   42-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
       18:   42-block  1
call    4 returned 18
branch  5 taken 18 (fallthrough)
branch  6 taken 0 (throw)
       18:   42-block  2
call    7 returned 18
call    8 returned 18
branch  9 taken 18 (fallthrough)
branch 10 taken 0 (throw)
       18:   42-block  3
call   11 returned 18
call   12 returned 18
    $$$$$:   42-block  4
call   13 never executed
    $$$$$:   42-block  5
    $$$$$:   42-block  6
call   14 never executed
    $$$$$:   42-block  7
        -:   43:    }
        -:   44:    // TODO
        3:   45:  return resp;
        3:   45-block  0
        3:   45-block  1
        -:   46:}
        -:   47:
        -:   48:// Implementacion Problema 4
function _Z35creceElTeleworkingEnCiudadesGrandesSt6vectorIS_IiSaIiEESaIS1_EES3_S3_S3_ called 3 returned 100% blocks executed 58%
        3:   49:bool creceElTeleworkingEnCiudadesGrandes ( eph_h t1h, eph_i t1i, eph_h t2h, eph_i t2i ) {
        3:   50:	bool resp = false;
        3:   51:    if(proporcionTeleworking(t2h,t2i)>proporcionTeleworking(t1h,t1i) ){
        3:   51-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   51-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:   51-block  2
call    7 returned 3
branch  8 taken 3 (fallthrough)
branch  9 taken 0 (throw)
        3:   51-block  3
call   10 returned 3
branch 11 taken 3 (fallthrough)
branch 12 taken 0 (throw)
        3:   51-block  4
call   13 returned 3
branch 14 taken 3 (fallthrough)
branch 15 taken 0 (throw)
        3:   51-block  5
call   16 returned 3
call   17 returned 3
call   18 returned 3
call   19 returned 3
branch 20 taken 2 (fallthrough)
branch 21 taken 1
    $$$$$:   51-block  6
call   22 never executed
    $$$$$:   51-block  7
    $$$$$:   51-block  8
call   23 never executed
    $$$$$:   51-block  9
    $$$$$:   51-block 10
call   24 never executed
    $$$$$:   51-block 11
    $$$$$:   51-block 12
call   25 never executed
        2:   52:        resp=true;
        2:   52-block  0
        -:   53:    }
        -:   54:	// TODO
        -:   55:	
        3:   56:  return  resp;
        3:   56-block  0
        3:   56-block  1
        -:   57:}
        -:   58:
        -:   59:// Implementacion Problema 5
function _Z19costoSubsidioMejoraSt6vectorIS_IiSaIiEESaIS1_EES3_i called 2 returned 100% blocks executed 77%
        2:   60:int costoSubsidioMejora( eph_h th, eph_i ti, int monto ){
        2:   61:	int resp =0;
        -:   62:
       10:   63:    for (int i=0;i<th.size();i++){
        2:   63-block  0
       10:   63-block  1
call    0 returned 10
branch  1 taken 8 (fallthrough)
branch  2 taken 2
        8:   63-block  2
        8:   64:        if(th[i][II7]==1 && tieneCasaChica(th[i],ti)){
        8:   64-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 4 (fallthrough)
branch  3 taken 4
        4:   64-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4:   64-block  2
call    7 returned 4
call    8 returned 4
branch  9 taken 4 (fallthrough)
branch 10 taken 0 (throw)
        4:   64-block  3
call   11 returned 4
branch 12 taken 4 (fallthrough)
branch 13 taken 0 (throw)
        4:   64-block  4
branch 14 taken 2 (fallthrough)
branch 15 taken 2
        2:   64-block  5
        6:   64-block  6
        8:   64-block  7
branch 16 taken 4 (fallthrough)
branch 17 taken 4
        4:   64-block  8
call   18 returned 4
        8:   64-block  9
branch 19 taken 4 (fallthrough)
branch 20 taken 4
        4:   64-block 10
call   21 returned 4
        8:   64-block 11
branch 22 taken 2 (fallthrough)
branch 23 taken 6
    $$$$$:   64-block 12
branch 24 never executed
branch 25 never executed
    $$$$$:   64-block 13
call   26 never executed
    $$$$$:   64-block 14
    $$$$$:   64-block 15
branch 27 never executed
branch 28 never executed
    $$$$$:   64-block 16
call   29 never executed
        2:   65:            resp+=monto;
        2:   65-block  0
        -:   66:        }
        -:   67:    }
        -:   68:	// TODO
        -:   69:
        2:   70:  return  resp;
        2:   70-block  0
        2:   70-block  1
        -:   71:}
        -:   72:
        -:   73:// Implementacion Problema 6
function _Z11generarJoinSt6vectorIS_IiSaIiEESaIS1_EES3_ called 1 returned 100% blocks executed 77%
        1:   74:join_hi generarJoin( eph_h th, eph_i ti ){
        2:   75:    hogar h = {};
        1:   75-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:   75-block  1
call    2 never executed
        2:   76:    individuo i = {};
call    0 returned 1
        1:   76-block  0
call    1 returned 1
    $$$$$:   76-block  1
call    2 never executed
        1:   77:	join_hi resp = {};
call    0 returned 1
        5:   78:    for(int k=0;k<th.size();k++){
        5:   78-block  0
call    0 returned 5
branch  1 taken 4 (fallthrough)
branch  2 taken 1
        4:   78-block  1
       36:   79:        for(int j=0;j<ti.size();j++){
        4:   79-block  0
       36:   79-block  1
call    0 returned 36
branch  1 taken 32 (fallthrough)
branch  2 taken 4
       32:   79-block  2
       32:   80:            if (th[k][HOGCODUSU]==ti[j][INDCODUSU]){
       32:   80-block  0
call    0 returned 32
call    1 returned 32
call    2 returned 32
call    3 returned 32
branch  4 taken 8 (fallthrough)
branch  5 taken 24
        8:   81:                h = th[k];
        8:   81-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:   82:                i = ti[j];
        8:   82-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:   83:                resp.push_back(make_pair(h,i));
        8:   83-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:   83-block  1
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        8:   83-block  2
call    6 returned 8
    $$$$$:   83-block  3
call    7 never executed
    $$$$$:   83-block  4
        -:   84:            }
        -:   85:        }
        -:   86:    }
        -:   87:
        -:   88:	// TODO
        -:   89:	
        2:   90:  return  resp;
        1:   90-block  0
        1:   90-block  1
        -:   91:}
        -:   92:
        -:   93:// Implementacion Problema 7
function _Z20ordenarRegionYCODUSURSt6vectorIS_IiSaIiEESaIS1_EES4_ called 2 returned 100% blocks executed 100%
        2:   94:void ordenarRegionYCODUSU (eph_h & th, eph_i & ti) {
        2:   95:    insertionSortRegion(th);
        2:   95-block  0
call    0 returned 2
        2:   96:    insertionSortCodusuEnRegion(th);
call    0 returned 2
        -:   97:
        2:   98:    insertionSortCodusu(th,ti);
call    0 returned 2
        2:   99:    insertionSortComponenteEnCodusu(ti);
call    0 returned 2
        -:  100:
        -:  101:
        -:  102:	// TODO
        -:  103:	
        2:  104:	return;
        -:  105:}
        -:  106:
        -:  107:// Implementacion Problema 8
function _Z16muestraHomogeneaRSt6vectorIS_IiSaIiEESaIS1_EES4_ called 3 returned 100% blocks executed 66%
        3:  108:vector < hogar > muestraHomogenea( eph_h & th, eph_i & ti ){
        9:  109:    vector<pair<int,int>> ingresosDeHogares=ingresoTotalPorHogar( th, ti);
        3:  109-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  109-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:  109-block  2
call    6 returned 3
branch  7 taken 3 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 3
call   10 returned 3
    $$$$$:  109-block  3
    $$$$$:  109-block  4
    $$$$$:  109-block  5
call   11 never executed
        3:  110:    ordenarPorIngresos( ingresosDeHogares );
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        6:  111:    vector<pair<int,int>>  ingresosHomogeneos = mesetaDeIngresosMasLarga (ingresosDeHogares);
        3:  111-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  111-block  1
call    3 returned 3
    $$$$$:  111-block  2
call    4 never executed
        3:  112:    vector < hogar > resp = {};
        3:  112-block  0
call    0 returned 3
       12:  113:    for(int k=0;k<ingresosHomogeneos.size();k++){
       12:  113-block  0
call    0 returned 12
branch  1 taken 9 (fallthrough)
branch  2 taken 3
        9:  113-block  1
       86:  114:        for(int i=0;i<th.size();i++){
        9:  114-block  0
       86:  114-block  1
call    0 returned 86
branch  1 taken 77 (fallthrough)
branch  2 taken 9
       77:  114-block  2
       77:  115:            if(ingresosHomogeneos[k].first==th[i][HOGCODUSU]){
       77:  115-block  0
call    0 returned 77
call    1 returned 77
call    2 returned 77
branch  3 taken 9 (fallthrough)
branch  4 taken 68
        9:  116:                resp.push_back(th[i]);
        9:  116-block  0
call    0 returned 9
call    1 returned 9
branch  2 taken 9 (fallthrough)
branch  3 taken 0 (throw)
        -:  117:            }
        -:  118:        }
        -:  119:    }
        3:  120:    if (resp.size() < 3){
        3:  120-block  0
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
       1*:  121:        resp = {};
        1:  121-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  121-block  1
        1:  121-block  2
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  121-block  3
call    5 never executed
        1:  121-block  4
    $$$$$:  121-block  5
    $$$$$:  121-block  6
branch  6 never executed
branch  7 never executed
    $$$$$:  121-block  7
call    8 never executed
    $$$$$:  121-block  8
        -:  122:    }
        -:  123:    // TODO
        -:  124:
        6:  125:    return  resp;
        3:  125-block  0
        3:  125-block  1
        -:  126:}
        -:  127:
        -:  128:// Implementacion Problema 9
function _Z14corregirRegionRSt6vectorIS_IiSaIiEESaIS1_EES3_ called 1 returned 100% blocks executed 100%
        1:  129:void corregirRegion( eph_h & th, eph_i ti ) {
        1:  130:	int j=0;
        1:  130-block  0
        5:  131:    while(j<th.size()){
        5:  131-block  0
call    0 returned 5
branch  1 taken 4 (fallthrough)
branch  2 taken 1
        4:  132:        if(th[j][REGION]==GBA){
        4:  132-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 2 (fallthrough)
branch  3 taken 2
        2:  133:            th[j][REGION]=PAMPEANA;
        2:  133-block  0
call    0 returned 2
call    1 returned 2
        -:  134:        }
        4:  135:        j++;
        4:  135-block  0
        -:  136:    }
        -:  137:	// TODO
        -:  138:	
        1:  139:	return;
        1:  139-block  0
        -:  140:}
        -:  141:
        -:  142:// Implementacion Problema 10
function _Z16quitarIndividuosRSt6vectorIS_IiSaIiEESaIS1_EES4_S_ISt4pairIiiESaIS6_EE called 3 returned 100% blocks executed 82%
        3:  143:pair < eph_h, eph_i > quitarIndividuos(eph_i & ti, eph_h & th, vector<pair<int,dato>>  busqueda ) {
        6:  144:    eph_h rth = {};
        3:  144-block  0
call    0 returned 3
call    1 returned 3
    $$$$$:  144-block  1
call    2 never executed
        6:  145:    eph_i rti = {};
call    0 returned 3
call    1 returned 3
    $$$$$:  145-block  0
call    2 never executed
        3:  146:    pair<eph_h, eph_i> resp = make_pair(rth, rti);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  147:    int swapsti = 0, swapsth = 0;
        6:  148:    eph_h th0 = th;
        3:  148-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 3
    $$$$$:  148-block  1
call    4 never executed
        6:  149:    eph_i ti0 = ti;
        3:  149-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  149-block  1
call    3 returned 3
    $$$$$:  149-block  2
call    4 never executed
       28:  150:    for (int i = 0; i < ti0.size(); i++) {
        3:  150-block  0
       28:  150-block  1
call    0 returned 28
branch  1 taken 25 (fallthrough)
branch  2 taken 3
       25:  150-block  2
       25:  151:        if (individuoBuscado(ti[0], busqueda)) {
       25:  151-block  0
call    0 returned 25
branch  1 taken 25 (fallthrough)
branch  2 taken 0 (throw)
       25:  151-block  1
call    3 returned 25
call    4 returned 25
branch  5 taken 25 (fallthrough)
branch  6 taken 0 (throw)
       25:  151-block  2
call    7 returned 25
branch  8 taken 25 (fallthrough)
branch  9 taken 0 (throw)
       25:  151-block  3
call   10 returned 25
call   11 returned 25
branch 12 taken 13 (fallthrough)
branch 13 taken 12
    $$$$$:  151-block  4
call   14 never executed
    $$$$$:  151-block  5
    $$$$$:  151-block  6
call   15 never executed
    $$$$$:  151-block  7
       13:  152:            rti.push_back(ti[0]);
       13:  152-block  0
call    0 returned 13
call    1 returned 13
branch  2 taken 13 (fallthrough)
branch  3 taken 0 (throw)
       13:  153:            swap(ti, 0, ti.size() - 1);   //- swapsti
       13:  153-block  0
call    0 returned 13
call    1 returned 13
branch  2 taken 13 (fallthrough)
branch  3 taken 0 (throw)
       13:  154:            ti.pop_back();
       13:  154-block  0
call    0 returned 13
       13:  155:            swapsti++;
       67:  156:            for (int k = 0; k < (ti.size() - 1); k++) {
       67:  156-block  0
call    0 returned 67
branch  1 taken 54 (fallthrough)
branch  2 taken 13
       54:  156-block  1
       54:  157:                swap(ti, k, k + 1);
       54:  157-block  0
call    0 returned 54
branch  1 taken 54 (fallthrough)
branch  2 taken 0 (throw)
        -:  158:            }
        -:  159:        }
        -:  160:    }
        8:  161:        for (int j = 0; j < th.size(); j++) {
        3:  161-block  0
        8:  161-block  1
call    0 returned 8
branch  1 taken 5 (fallthrough)
branch  2 taken 3
        5:  161-block  2
        5:  162:            bool quiteTodos = true;
       27:  163:            for (int w = 0; w < ti.size(); w++) {
        5:  163-block  0
       27:  163-block  1
call    0 returned 27
branch  1 taken 22 (fallthrough)
branch  2 taken 5
       22:  163-block  2
       22:  164:                if (th[j][HOGCODUSU] == ti[w][INDCODUSU]) {
       22:  164-block  0
call    0 returned 22
call    1 returned 22
call    2 returned 22
call    3 returned 22
branch  4 taken 8 (fallthrough)
branch  5 taken 14
        8:  165:                    quiteTodos = false;
        8:  165-block  0
        -:  166:                }
        -:  167:            }
       25:  168:            for (int w = 0; w < rti.size(); w++) {
        5:  168-block  0
       25:  168-block  1
call    0 returned 25
branch  1 taken 20 (fallthrough)
branch  2 taken 5
       20:  168-block  2
       20:  169:                if (th[j][HOGCODUSU] == rti[w][INDCODUSU]) {
       20:  169-block  0
call    0 returned 20
call    1 returned 20
call    2 returned 20
call    3 returned 20
branch  4 taken 3 (fallthrough)
branch  5 taken 17
        3:  170:                    rth.push_back(th[j]);
        3:  170-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  171:                    if (quiteTodos) {
        3:  171-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  172:                        swap(th, j, th.size() - w - 1);
        2:  172-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  173:                        th.pop_back();
        2:  173-block  0
call    0 returned 2
        2:  174:                        swapsth++;
        3:  175:                        for (int k = 0; (k + 1) < th.size(); k++) {
        3:  175-block  0
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1:  175-block  1
        1:  176:                            swap(th, j + k, j + k + 1);
        1:  176-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  177:                        }
        -:  178:                    }
        -:  179:                }
        -:  180:            }
        -:  181:
        -:  182:        }
        -:  183:
        -:  184:
        -:  185:        // TODO
        3:  186:        resp = make_pair(rth, rti);
        3:  186-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  186-block  1
call    3 returned 3
call    4 returned 3
        -:  187:
        6:  188:        return resp;
        3:  188-block  0
        -:  189:
        -:  190:}
        -:  191:
        -:  192:// Implementacion Problema 11
function _Z31histogramaDeAnillosConcentricosSt6vectorIS_IiSaIiEESaIS1_EES3_St4pairIiiES1_ called 2 returned 100% blocks executed 69%
        2:  193:    vector<int> histogramaDeAnillosConcentricos(eph_h th, eph_i ti, pair<int, int> centro, vector<int> distancias) {
        2:  194:        vector<int> resp = {};
        2:  194-block  0
call    0 returned 2
        2:  195:        resp = hogaresEnAnillosConcentricos(distancias, centro, th);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  195-block  0
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  195-block  1
call    6 returned 2
call    7 returned 2
call    8 returned 2
    $$$$$:  195-block  2
call    9 never executed
    $$$$$:  195-block  3
        -:  196:
        -:  197:        // TODO
        -:  198:
        2:  199:        return resp;
        2:  199-block  0
        -:  200:    }
        -:  201:
        -:  202:
